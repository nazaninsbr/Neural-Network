% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 17-Nov-2017 12:32:09
%
% This script assumes these variables are defined:
%
%   input - input data.
%   output - target data.

x = input;
t = output;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainrp';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 16;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
%net.trainParam.mu = 0.00001;
%net.trainParam.mu_dec = 0.1;
net.trainParam.mu_inc = 10;
%net.trainParam.mu_max=1.00e+300;
net.trainParam.min_grad=1.00e-30;
net.trainParam.max_fail =100000;
net.trainParam.epochs=130000;
% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
